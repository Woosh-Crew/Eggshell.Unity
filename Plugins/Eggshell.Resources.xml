<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eggshell.Resources</name>
    </assembly>
    <members>
        <member name="T:Eggshell.Resources.Assets">
            <summary>
            The assets module is responsible for handling the loading and unloading
            of resources and assets. This API will help you greatly when trying to
            make data loaded at runtime and compiled at runtime.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Assets.Registered">
            <summary>
            A reference to all the registered resources, loaded or not. You can get
            resources by its path or identifier and load them manually.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Load``1(System.Int32,System.Func{Eggshell.Resources.Resource},System.Boolean)">
            <summary>
            Manually load an asset from its hash, and if it doesn't exist creat it from
            a func that returns a resource. Useful when loading resources straight from memory
            or from web requests. It is recommended you just use the Pathing version though.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Load``1(Eggshell.IO.Pathing,System.Boolean)">
            <summary>
            Loads an asset from its path. by using its Virtual.Hash as its identifier.
            If the asset you are trying to load has a shorthand path, it'll automatically
            apply that to the path if its not there.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Fallback``1">
            <summary>
            Loads a fallback assets of the type T, such as with a model itd load
            the error model, or a sound, it'll load some funky sound.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Find(Eggshell.IO.Pathing,System.Boolean)">
            <summary>
            Trys to find a resource by its path, if it doesn't exist and its a
            valid path, it'll create a resource at that path.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Find(System.Int32)">
            <summary>
            Trys to find a resource by its identifier / hash. Returns null
            if nothing was found.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Assets.Item(System.Int32)">
            <summary>
            Gets to get a resource by its hash / identifier. This is useful
            for loading resources over the network.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Assets.Item(Eggshell.IO.Pathing)">
            <summary>
            Gets a resource by its path. Make sure to call virtual before you
            try and get the path, or else it'll most likely return the wrong path.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Fill(System.Int32,System.Func{Eggshell.Resources.Resource})">
            <summary>
            Fills a slot on the resources storage by its raw identifier.
            It'll return the slot that's currently being used from the hash,
            if not it'll make a not slot for that resource and return that.
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Assets.Fill(Eggshell.IO.Pathing)">
            <summary>
            Fills a slot on the resources storage by its path.
            It'll return the slot that's currently being used from the hash,
            if not it'll make a not slot for that resource and return that.
            </summary>
        </member>
        <member name="T:Eggshell.Resources.Resource">
            <summary>
            A resource holds a reference and its state to an
            asset. It uses a stream for loading the asset.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Name">
            <summary>
            The UI friendly name used to represent this resource.
            Used currently in debug modes to see what the resource is.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Identifier">
            <summary>
            The identifier that's used for this resource. Which can be
            used in the registry. This will get generated by a virtualized
            path that has been normalised. Hash = super fast and nice.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Extension">
            <summary>
            The file extension for this resource. Used when setting up an
            asset so it uses the correct binder or what ever the asset
            needs to do based on the extension.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Persistant">
            <summary>
            Can this asset still be loaded, without having any asset
            references to it? Useful for when loading assets such as
            UI that doesn't need to be reloaded everytime its used.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.IsLoaded">
            <summary>
            Is this resource currently loaded in memory? (Just checks
            if the source doesn't equal null)
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Source">
            <summary>
            The source asset that is cached when the resource finishes
            loading. Usually used for duplicating instances of it.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Instances">
            <summary>
            All instances of the source asset that has been cloned. You
            get one of these when you load an asset.
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Stream">
            <summary>
            The stream that will load the target asset. (Such as when
            you want to load an asset from a path, it'll just open a
            read only file stream) 
            </summary>
        </member>
        <member name="P:Eggshell.Resources.Resource.Components">
            <summary>
            Additional data this resource has, that is used for dependency
            injection (Such as origin)
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Resource.Load``1(System.Boolean)">
            <summary>
            Grabs the loaded asset from memory or will open a stream
            and load the asset, then return an instance of the asset
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Resource.Unload(System.Boolean)">
            <summary>
            Unloads this asset from memory, if it is not persistent.
            (Pass through true as an arg to forcefully unload it)
            </summary>
        </member>
        <member name="M:Eggshell.Resources.Resource.Delete">
            <summary>
            Deletes this resource. You shouldn't need to do this unless
            you know what you are doing. Can't be deleted if its loaded.
            </summary>
        </member>
    </members>
</doc>
